class DataValidator:
    def __init__(self):
        self.validated_numbers = []

    def is_positive_integer(self, string):
        """
        Determines if a given string represents a positive integer.

        Args:
            string (str): The string to be evaluated.

        Returns:
            bool: True if the string is a positive integer, False otherwise.
        """
        try:
            number = int(string)
            return number > 0
        except ValueError:
            return False

    def validate_and_process(self, input_list):
        """
        Validates a list of strings, extracting positive integers.

        This method processes each string in the input list, adding valid
        positive integers to the validated_numbers attribute.

        Args:
            input_list (list of str): A list of strings to be validated and processed.

        Raises:
            TypeError: If the input is not a list of strings.
        """
        if not isinstance(input_list, list) or not all(isinstance(item, str) for item in input_list):
            raise TypeError("Input must be a list of strings.")

        self.validated_numbers = [int(item) for item in input_list if self.is_positive_integer(item)]
